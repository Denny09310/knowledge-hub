@page "/Articles/{Id}"

@inject ArticleLoader ArticleLoader

@if (Article != null)
{
    <div class="gap-4 flex flex-col justify-between md:items-center md:flex-row">
        <div>
            <h2 id="article-title" class="mb-4 text-gray-900 text-3xl font-extrabold leading-none tracking-tight dark:text-white md:text-4xl">@Article.Title</h2>
            <p aria-labelledby="article-title" class="text-gray-700 text-sm font-medium">@Article.Author</p>
            <p class="text-gray-500 text-xs">@Article.Date.ToShortDateString()</p>
        </div>
    </div>

    <div class="prose mt-6 dark:prose-inverse md:mt-8 md:prose-lg lg:prose-xl">
        @((MarkupString)(Article.Content ?? ""))
    </div>
}

@code
{
    [Parameter]
    public string Id { get; set; } = default!;

    private Article? Article { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            throw new ArgumentException("To show an article, a valid id must be provided.", nameof(Id));
        }

        Article = await ArticleLoader.LoadArticleAsync(Id);
    }
}