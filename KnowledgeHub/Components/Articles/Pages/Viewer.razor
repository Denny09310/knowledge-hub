@page "/Articles/{Id}"
@attribute [StreamRendering]

@using Markdig

@inject ArticleService ArticlesService

@if (article == null)
{
    @* TODO: Display a skeleton representing the format below, possibly create a separate component *@
}
else
{
    <h2 class="mb-4 text-gray-900 text-3xl font-extrabold leading-none tracking-tight dark:text-white md:text-4xl">@article.Title</h2>
    <p class="text-gray-700 text-sm font-medium">@article.Author</p>
    <p class="text-gray-500 text-xs">@article.Date.ToShortDateString()</p>

    <div class="prose mt-8 dark:prose-inverse md:prose-lg lg:prose-xl">
        @((MarkupString)Markdown.ToHtml(article.Content, _pipeline))
    </div>
}

@code
{
    private static readonly MarkdownPipeline _pipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .DisableHtml()
        .Build();

    [Parameter]
    public string Id { get; set; } = default!;

    private Article? article;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            throw new ArgumentException("To show an article, must be provided a valid id.", nameof(Id));
        }

        article = await ArticlesService.GetArticleAsync(Id);
    }
}
