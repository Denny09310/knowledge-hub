@page "/Articles/Editor"
@rendermode InteractiveServer
@using PSC.Blazor.Components.MarkdownEditor
@using PSC.Blazor.Components.MarkdownEditor.EventsArgs

@inject IAuthorizationService AuthorizationService
@inject ArticlesManager ArticlesManager

@if (!hasPermissionToEdit)
{
    <p>You are not authorized to edit this article.</p>
}
else if (isLoading)
{
    <PageLoader />
}
else if (article == null)
{
    <DangerAlert Title="Error!" Message="This article does not exist or has been deleted." />
}
else
{
    <div class="markdown-container">
        <MarkdownEditor />
    </div>
}

@code
{
    [SupplyParameterFromQuery]
    public string? Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> GetAuthenticationState { get; set; } = default!;

    private Article? article;
    private bool isLoading;
    private bool hasPermissionToEdit; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            if (string.IsNullOrEmpty(Id))
            {
                InitializeEditor();
                return;
            }

            article = await ArticlesManager.GetArticleAsync(Id);
            await CheckAuthorizationAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void InitializeEditor()
    {
        article = new();
        hasPermissionToEdit = true;
    }

    private async Task CheckAuthorizationAsync()
    {
        if (article == null)
        {
            hasPermissionToEdit = false;
            return;
        }

        var authenticationState = await GetAuthenticationState;
        var authorizationResult = await AuthorizationService.AuthorizeAsync(
            authenticationState.User,
            article,
            "Authors_Only");

        hasPermissionToEdit = authorizationResult.Succeeded;
    }
}
