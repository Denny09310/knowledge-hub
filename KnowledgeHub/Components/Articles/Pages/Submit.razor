@page "/Articles/Submit"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Markdig.Renderers
@using PSC.Blazor.Components.MarkdownEditor
@using PSC.Blazor.Components.MarkdownEditor.EventsArgs

@attribute [Authorize]
@rendermode InteractiveServer

@inject ArticleService ArticleService
@inject NavigationManager NavigationManager

<h1 class="mb-4 text-gray-900 text-3xl font-bold dark:text-white">Create a new article</h1>

<EditForm class="space-y-4" Model="Input" OnValidSubmit="OnValidSubmit">
    <InputText @bind-Value="Input.Title"
               id="Input.Title"
               class="bg-gray-50 border-gray-300 text-gray-900 p-2.5 block w-full rounded-lg border text-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
               placeholder="Write the title..." />

    <MarkdownEditor @bind-Value="Input.Content" />

    <button type="submit"
            class="text-white bg-blue-600 px-5 py-2.5 w-full rounded-lg text-center text-sm font-medium hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
        Publish
    </button>
</EditForm>

@code
{
    [SupplyParameterFromQuery]
    public string ArticleId { get; set; } = Guid.NewGuid().ToString();

    [CascadingParameter]
    private Task<AuthenticationState> GetAuthenticationState { get; set; } = default!;

    private Article? article;

    private Article Input { get; set; } = new();
    private string AuthorId { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        AuthorId = await GetCurrentUserId();

        article = await ArticleService.GetArticleAsync(ArticleId);
        if (article != null)
        {
            Input = new Article
            {
                AuthorId = article.AuthorId,
                Title = article.Title,
                Content = article.Content
            };
        }
    }

    private async Task OnValidSubmit()
    {
        if (article != null)
        {
            article.Title = Input.Title;
            article.Content = Input.Content;

            await ArticleService.UpdateArticleAsync(ArticleId!, article);
        }
        else
        {
            article = new Article
            {
                Id = ArticleId,
                AuthorId = AuthorId,
                Title = Input.Title,
                Content = Input.Content,
            };

            await ArticleService.AddArticleAsync(article);
        }

        NavigationManager.NavigateTo($"Articles/{article.Id}");
    }

    private async Task<string> GetCurrentUserId()
    {
        var authState = await GetAuthenticationState;
        return authState?.User.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(200)]
        public string Title { get; set; } = default!;

        [Required]
        public string Content { get; set; } = default!;

        [Required]
        public string AuthorId { get; set; } = default!;
    }
}
