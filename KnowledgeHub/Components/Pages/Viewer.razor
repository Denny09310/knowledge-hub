@page "/{Id}"
@attribute [StreamRendering]

@inject ArticleService ArticleService

@if (loading)
{
    <PageLoader />
}
else if (article == null)
{
    <DangerAlert Title="Error!" Message="This article does not exists or has been deleted." />
}
else
{
    <div class="gap-4 mb-8 flex flex-col justify-between md:items-center md:flex-row">
        <div>
            <h2 id="article-title" class="mb-4 text-gray-900 text-3xl font-extrabold leading-none tracking-tight dark:text-white md:text-4xl">@article.Title</h2>
            <p aria-labelledby="article-title" class="text-gray-700 text-sm font-medium">@article.Author</p>
            <p class="text-gray-500 text-xs">@article.CreatedAt.ToShortDateString()</p>
        </div>
    </div>

    <div class="prose scroll-smooth dark:prose-inverse">
        @((MarkupString)(article.Content ?? ""))
    </div>
    
    <PageScript Src="./Components/Articles/Pages/Viewer.razor.js" />
}

@code
{
    [Parameter]
    public string Id { get; set; } = default!;

    private Article? article;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            throw new ArgumentException("To show an article, a valid id must be provided.", nameof(Id));
        }

        try
        {
            loading = true;
            article = await ArticleService.LoadArticleAsync(Id);
        }
        finally
        {
            loading = false;
        }
    }
}