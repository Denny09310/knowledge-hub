@implements IDisposable

@inject NavigationManager NavigationManager

<form method="post" action="/Account/Logout">
    <AntiforgeryToken />
    <input type="hidden" name="returnUrl" value="@CurrentUrl" />
    <button @attributes="AdditionalAttributes" type="submit">
        @ChildContent
    </button>
</form>

@code
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private string? CurrentUrl { get; set; }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        GC.SuppressFinalize(this);
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        CurrentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        CurrentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        InvokeAsync(StateHasChanged);
    }
}