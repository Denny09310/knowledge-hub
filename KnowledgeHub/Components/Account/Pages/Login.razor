@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using KnowledgeHub.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="flex min-h-screen items-center justify-center">
    <div class="bg-white p-8 w-full max-w-md rounded-lg shadow-lg dark:bg-gray-800">
        <h1 class="text-gray-800 mb-6 text-center text-2xl font-bold dark:text-gray-100">Log in</h1>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="space-y-6">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500" role="alert" />

            <div>
                <label for="Input.Email" class="text-gray-700 block text-sm font-medium dark:text-gray-300">Email</label>
                <div class="mt-1">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="bg-gray-50 border-gray-300 text-gray-900 p-2.5 block w-full rounded-lg border text-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                </div>
                <ValidationMessage For="() => Input.Email" class="text-red-500 mt-1 text-sm" />
            </div>

            <div>
                <label for="Input.Password" class="text-gray-700 block text-sm font-medium dark:text-gray-300">Password</label>
                <div class="mt-1">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="bg-gray-50 border-gray-300 text-gray-900 p-2.5 block w-full rounded-lg border text-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" autocomplete="current-password" aria-required="true" placeholder="••••••••" />
                </div>
                <ValidationMessage For="() => Input.Password" class="text-red-500 mt-1 text-sm" />
            </div>

            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <InputCheckbox @bind-Value="Input.RememberMe" id="remember_me" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500 dark:border-gray-700" />
                    <label for="remember_me" class="ml-2 text-gray-900 block text-sm dark:text-gray-300">Remember me</label>
                </div>
                <div class="text-sm">
                    <a href="Account/ForgotPassword" class="text-indigo-600 font-medium hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">Forgot your password?</a>
                </div>
            </div>

            <div>
                <button type="submit" class="bg-indigo-600 text-white py-2 px-4 w-full rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:bg-indigo-500 dark:hover:bg-indigo-600 dark:focus:ring-offset-gray-800">Log in</button>
            </div>
        </EditForm>

        <div class="mt-6 text-center">
            <p class="text-gray-600 text-sm dark:text-gray-300">
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">Register as a new user</a>
            </p>
            <p class="text-gray-600 mt-2 text-sm dark:text-gray-300">
                <a href="Account/ResendEmailConfirmation" class="text-indigo-600 font-medium hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">Resend email confirmation</a>
            </p>
        </div>

        <div class="mt-6">
            <h3 class="text-gray-800 text-center text-lg font-medium dark:text-gray-100">Use another service to log in</h3>
            <hr class="my-4 border-gray-200 dark:border-gray-700">
            <ExternalLoginPicker />
        </div>
    </div>
</div>

@code 
{
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
