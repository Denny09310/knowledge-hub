@page "/Account/Login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject UserContext UserContext

<section class="flex items-center justify-center dark:bg-gray-900">
    <div class="bg-white w-full rounded-lg shadow dark:border dark:bg-gray-800 dark:border-gray-700 sm:max-w-md md:mt-0 xl:p-0">
        <div class="p-6 space-y-4 sm:p-8 md:space-y-6">
            <h1 class="text-gray-900 text-xl font-bold leading-tight tracking-tight dark:text-white md:text-2xl">
                Sign in to your account
            </h1>
            <EditForm method="post" class="space-y-4 md:space-y-6" Model="Input" FormName="login" OnValidSubmit="OnValidSubmit">
                <div>
                    <label for="Input.Email" class="mb-2 text-gray-900 block text-sm font-medium dark:text-white">Your email</label>
                    <InputText @bind-Value="Input.Email"
                    type="email"
                    id="Input.Email"
                    class="bg-gray-50 border-gray-300 text-gray-900 p-2.5 block w-full rounded-lg border focus:ring-blue-600 focus:border-blue-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    placeholder="name@company.com" />
                </div>
                <div>
                    <label for="Input.Password" class="mb-2 text-gray-900 block text-sm font-medium dark:text-white">Password</label>
                    <InputText @bind-Value="Input.Password"
                    type="password"
                    id="Input.Password"
                    placeholder="••••••••"
                    class="bg-gray-50 border-gray-300 text-gray-900 p-2.5 block w-full rounded-lg border focus:ring-blue-600 focus:border-blue-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                </div>
                <div class="flex items-center justify-between">
                    <div class="flex items-start">
                        <div class="h-5 flex items-center">
                            <InputCheckbox @bind-Value="Input.RememberMe"
                            id="Input.RememberMe"
                            aria-describedby="Input.RememberMe"
                            class="w-4 h-4 border-gray-300 bg-gray-50 rounded border focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:ring-offset-gray-800 dark:focus:ring-blue-600" />
                        </div>
                        <div class="ml-3 text-sm">
                            <label for="Input.RememberMe" class="text-gray-500 dark:text-gray-300">Remember me</label>
                        </div>
                    </div>
                    <a href="#" class="text-blue-600 text-sm font-medium hover:underline dark:text-blue-500">Forgot password?</a>
                </div>
                <button type="submit" class="text-white bg-blue-600 px-5 py-2.5 w-full rounded-lg text-center text-sm font-medium hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Sign in</button>
                <p class="text-gray-500 text-sm font-light dark:text-gray-400">
                    Don’t have an account yet? <a href="Account/Register" class="text-blue-600 font-medium hover:underline dark:text-blue-500">Sign up</a>
                </p>
            </EditForm>
        </div>
    </div>
</section>

@code
{
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnValidSubmit()
    {
        var user = await UserContext.GetUserAsync(HttpContext);

        if (user == null)
        {
            // TODO: Add some system to show an error to the user
            return;
        }

        var claims = new List<Claim>
        {
            new(ClaimTypes.NameIdentifier, user.Id),
            new(ClaimTypes.Email, user.Email),
            new(ClaimTypes.Name, user.Username ?? ""),
        };

        var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

        var authenticationProperties = new AuthenticationProperties
        {
            IsPersistent = Input.RememberMe
        };

        await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,
            claimsPrincipal, authenticationProperties);

        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }

    private sealed class InputModel
    {
        [Required]
        public string Email { get; set; } = default!;

        [Required]
        public string Password { get; set; } = default!;

        public bool RememberMe { get; set; }
    }
}